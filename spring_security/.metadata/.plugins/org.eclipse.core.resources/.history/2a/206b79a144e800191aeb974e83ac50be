package com.tech.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;

@Configuration

public class Oauth2Config extends AuthorizationServerConfigurerAdapter {

	@Value("${config.oauth2.clientid}")
	private String clientId;
	
	@Value("${config.oauth2.clientSecret}")
	private String clientSecret;
	
	@Value("${config.oauth2.privateKey}")
	private String privateKey;
	
	@Value("${config.oauth2.publicKey}")
	private String publicKey;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	@Qualifier("authenticationManagerBean")
	private AuthenticationManager authenticationManager;
	
	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		security.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()");
	}
	
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		
		clients.inMemory()
			.withClient(clientId).secret(passwordEncoder.encode(clientSecret)).scopes("read","write")
			.authorizedGrantTypes("password","refresh_token").accessTokenValiditySeconds(3600)
			.refreshTokenValiditySeconds(18000);
	}
	
}
